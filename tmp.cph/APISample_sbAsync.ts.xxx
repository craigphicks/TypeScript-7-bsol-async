// @filename: ./tsconfig-top.json
{
    "files": [],
    "references": [
      {"path": "./node_modules/repo1/tsconfig.ref.json"},
    ]
}
// @filename: ./node_modules/repo1/tsconfig.ref.json
{
    "extends" : "./tsconfig.json",
    "compilerOptions": {
      "composite": true,
      "myId":"repo1_tsconfig.ref.json"
    }
}
// @filename: ./node_modules/repo1/tsconfig.json
{
    "extends": "../tsconfig.options.json",
    "compilerOptions": {
      "outDir": "dist",
      "module": "ESNext",
      "myId":"repo1_tsconfig.json"
    },
    "files": ["src/test1.ts"]
}
// @filename: ./node_modules/repo1/package.json
{
    "name":"repo1",
    "version":"1.0.0",
    "type":"module"
}
// @filename ./tsconfig.options.json
{
    "compilerOptions": {
     ///////////////////////////////////////////////////////////////
     // "@tsconfig/node14/tsconfig.json" properties
     "lib": ["es2020"],
     "module": "ES2020",
     "moduleResolution": "node",
     "target": "es2020",
     "strict":true,
     "esModuleInterop": true, //  esModuleInterop will also enable allowSyntheticDefaultImports.
     "skipLibCheck": false,
     "forceConsistentCasingInFileNames": true,
     ///////////////////////////////////////////////////////////////
     "declaration": true,
     "strictNullChecks": true,
     "exactOptionalPropertyTypes": true, // >= 4.4.2
     //"resolveJsonModule": true, -- incompatible with module "ES2020", needs node resolution strategy
     "sourceMap": false,
     "declarationMap": false, // enables importers to jump to source
     "incremental": true,
     "isolatedModules": true,
     "assumeChangesOnlyAffectDirectDependencies":false,
   }
 }
// @filename ./src/test1.ts
export const value = 1;

// @filename APISample_sbAsync.ts

// @ module: commonjs
// @ skipLibCheck: true
// @ noImplicitAny:true
// @ strictNullChecks:true

// @ filename: node_modules/typescript/index.d.ts
// declare module "typescript" {
//     export = ts;
// }


/*
 * Note: This test is a public API sample. This uses default sys interface without having to pass anything
 *       Please log a "breaking change" issue for any API breaking change affecting this issue
 */
// declare var console: any;


import ts from "../built/local/typescript"
//import {} from "ts-expose-internals"
import util from "util"

const topTsconfigPath = "./tsconfig-top.json";

async function watchMain() {
    const configPath = ts.findConfigFile(/*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
    if (!configPath) {
        throw new Error("Could not find a valid 'tsconfig.json'.");
    }

    // TypeScript can use several different program creation "strategies":
    //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,
    //  * ts.createSemanticDiagnosticsBuilderProgram
    //  * ts.createAbstractBuilder
    // The first two produce "builder programs". These use an incremental strategy to only re-check and emit files whose
    // contents may have changed, or whose dependencies may have changes which may impact change the result of prior type-check and emit.
    // The last uses an ordinary program which does a full type check after every change.
    // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
    // For pure type-checking scenarios, or when another tool/process handles emit, using `createSemanticDiagnosticsBuilderProgram` may be more desirable.

    // Note that there is another overload for `createWatchCompilerHost` that takes a set of root files.
    //const host_ = ts.createWatchCompilerHost(configPath, {}, ts.sys);
    const host = ts.createSolutionBuilderWithWatchHostAsync(ts.sys);
    const bwldr = ts.createSolutionBuilderAsync(host,[topTsconfigPath], {verbose:true});

    host.afterProgramEmitAndDiagnosticsAsync = async(bprogram: ts.EmitAndSemanticDiagnosticsBuilderProgram): Promise<void> =>{
        const myId = bprogram.getCompilerOptions()["myId"];
        const synDiagCount = bprogram.getSyntacticDiagnostics().length;
        const semDiagCount = bprogram.getSemanticDiagnostics().length;
        console.log("afterProgramEmitAndDiagnosticsAsync", util.inspect({synDiagCount,semDiagCount}));
        console.log("afterProgramEmitAndDiagnosticsAsync");
    }
    await bwldr.buildAsync()

}

it("APISample_sbAsync",async()=>{
    console.log("solutionBuilderAsync: calling watchMain()")
    await watchMain();
})
